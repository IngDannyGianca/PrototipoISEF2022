<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        EEL/+hAC//oIhP/5AgT/+QAI//qAEf/9ACU=
</value>
  </data>
</root>